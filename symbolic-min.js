(function (e, t) { "use strict"; function i(e) { var t; Array.prototype.forEach.call(e, function (e) { if (e.nodeType === 3) { t = s((e.textContent || e.nodeValue).split("")); if (t) { e.parentNode.replaceChild(u(t), e) } } else { i(e.childNodes) } }) } function s(e) { var t = false; e.forEach(function (r, i) { if (n.hasOwnProperty(r)) { t = true; e[i] = o(r) } }); return t ? e : false } function o(e) { return '<span class="symbolic-sr-only">' + n[e] + '</span><span aria-hidden="true">' + e + "</span>" } function u(e) { var n = t.createElement("span"); n.innerHTML = e.join(""); return n } function a(e, s) { function u(e) { return Object.prototype.toString.call(e) == "[object Object]" } function a(e) { return Object.prototype.toString.call(e) == "[object Array]" } var o; n = r; if (s && u(s)) { if (s.additions && u(s.additions)) { for (o in s.additions) { n[o] = s.additions[o] } } if (s.removals && a(s.removals)) { s.removals.forEach(function (e) { delete n[e] }) } if (s.symbols && u(s.symbols)) { n = s.symbols } } i(t.querySelectorAll(e)); return n } var n, r = { "~": "tilde", "`": "backtick", "!": "exclamation mark", "¡": "inverted exclamation mark", "#": "pound sign", "^": "caret", "*": "asterisk", "(": "left parenthesis", ")": "right parenthesis", "-": "dash", "—": "m dash", "--": "double dash", "–": "n dash", _: "underscore", ",": "comma", ".": "period", "…": "ellipses", "\\": "backslash", "|": "vertical bar", "?": "question mark", "¿": "inverted question mark", ";": "semi-colon", ":": "colon", '"': "quotation mark", "”": "left double quotation mark", "“": "right double quotation mark", "«": "left double angle bracket", "»": "right double angle bracket", "‹": "left single angle bracket", "›": "right single angle bracket", "'": "single quote", "’": "right single quote", "‘": "left single quote", "{": "left brace", "}": "right brace", "[": "left bracket", "]": "right bracket", "§": "section", "·": "small bullet", "†": "dagger", "‡": "double dagger", "→": "right arrow", "←": "left arrow", "↑": "up arrow", "↓": "down arrow", "↔": "horizontal arrow", "⇐": "left double arrow", "⇒": "right double arrow", "⇑": "up double arrow", "⇓": "down double arrow", "⇔": "horizontal double arrow", "♠": "spades", "♣": "clubs", "♥": "hearts", "♦": "diamonds", "+": "plus", "−": "minus", "±": "plus or minus", "÷": "divided by", "×": "multiplied by", "=": "equals", "≠": "not equals", "≈": "approximately equals", "‰": "per mil", "<": "less than", ">": "greater than", "≤": "less than or equal to", "≥": "greater than or equal to", "′": "prime", "″": "double prime", "∑": "sum" }; (function () { var e = ".symbolic-sr-only{border: 0 none;clip: rect(0px, 0px, 0px, 0px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}"; var n = t.createElement("p"), r = t.getElementsByTagName("head")[0] || t.documentElement; n.innerHTML = "x<style>" + e + "</style>"; r.insertBefore(n.lastChild, r.firstChild) })(); Array.prototype.forEach = Array.prototype.forEach || function (e, t) { var n, r; for (n = 0, r = this.length; n < r; ++n) { if (n in this) { e.call(t, this[n], n, this) } } }; if (typeof module != "undefined" && module.exports) { module.exports = a } if (typeof define === "function" && define.amd) { define("symbolic", [], function () { return a }) } e.symbolic = a })(this, document)
